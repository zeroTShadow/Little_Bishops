# Little_Bishops
UVa 861
/* Howard Szeto
 * little bishop */
import java.io.*;
import java.util.*;
class Main
{
  static int solnSet[][]=new int[8][65];
  int board[],numBishop,boardIndex;
  public Main(int arrangement[],int num, int index, int rowLoc)
  {
    board = new int[arrangement.length];
    for(int i=0;i<board.length;i++)
      board[i] = arrangement[i];
    numBishop = num;
    board[index]=rowLoc;
    boardIndex = index+1;
  }
  public static void main(String arg[])
  {
    Scanner sc = new Scanner (System.in);
    computeSoln();
    while(sc.hasNext())
    {
      Scanner temp = new Scanner (sc.nextLine());
      int n = temp.nextInt(), k = temp.nextInt();
      if(n!=0)
        System.out.println(solnSet[n-1][k]);
    }
  }
  public static void computeSoln()
  { /* only compute each possible set of (n,k) once */
    for(int i=0;i<solnSet.length;i++)
      for(int j=0;j<solnSet[i].length;j++)
        solnSet[i][j] = setTwoBoards(i+1,j);
  }
  public static int setTwoBoards(int n,int k)
  {
    if(k==0 || (n==1 && n==k))
      return 1;
    else if(n==2)
      return k<3?4:0;
    else if(2*(n-1)<k)
      return 0;
    /*special cases */
    int oddBoardSoln[] = new int[k+1], evenBoardSoln[] = new int[k+1];
    oddBoardSoln[0] = 1; evenBoardSoln[0] = 1;
    for(int i = 1;i<=k;i++)
    {/*use backtrack to find out ways to put i number of bishops in two different boards */
      oddBoardSoln[i] = placeBishops(n,i,true);
      evenBoardSoln[i] = placeBishops(n,i,false);
    }
    int ways = 0;
    for(int i = 0;i<=k;i++)
      ways+=oddBoardSoln[i] * evenBoardSoln[k-i];
    return ways;
  }
  public static int placeBishops(int n, int k, boolean isOdd)
  {
    if(k>=n)
      return 0;
    Deque<Main> possibleSoln = new ArrayDeque<Main>();
    int ways = 0;
    int newBoard[] = new int[isOdd ? (n+1)/2*2-1 : n/2*2]; 
    Arrays.fill(newBoard,-1); /*set up the board */
    for(int i=0;i<newBoard.length;i++)
    { /*set up the first bishop */
      for(int j=(isOdd ? Math.abs(i-(n-1)/2) : (int)Math.abs(i+1-(n/2+0.5)));
          j<(isOdd ? n-Math.abs(i-(n-1)/2) : n-1-(int)Math.abs(i+1-(n/2+0.5)));
          j++)
        possibleSoln.push(new Main(newBoard,1,i,j));
    }
    while(!possibleSoln.isEmpty())
    {
      Main checking = possibleSoln.pop();
      if(checking.numBishop + checking.board.length - checking.boardIndex < k)
        continue;
      /*remove setups that do not provide enough choice(s) for future bishops to avoid collision */
      boolean collision = false;
      for(int i=0;i<checking.boardIndex-1 && !collision;i++)
        if(checking.board[i]==checking.board[checking.boardIndex-1])
          collision = true;
      if(!collision)
      {
        if(checking.numBishop==k)
          ways++;
        else
        /* adding the next bishop */
          for(int i=checking.boardIndex;i<newBoard.length;i++)
          {
            for(int j=(isOdd ? Math.abs(i-(n-1)/2) : (int)Math.abs(i+1-(n/2+0.5)));
                j<(isOdd ? n-Math.abs(i-(n-1)/2) : n-1-(int)Math.abs(i+1-(n/2+0.5)));
                j++)
              possibleSoln.push(new Main(checking.board,checking.numBishop+1,i,j));
          }
      }
    }
    return ways;
  }
}
